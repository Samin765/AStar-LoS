using System.Linq;
using Imported.StandardAssets.Vehicles.Car.Scripts;
using Scripts.Game;
using Scripts.Map;
using UnityEngine;

using System.Collections;
using System.Collections.Generic;
using System;
using Newtonsoft.Json;



[RequireComponent(typeof(CarController))]
public class FollowPath
{
    private CarController m_Car;

    private Rigidbody my_rigidbody;

    private List<Vector3> path;

    private static ObstacleMapManager obstacleMapManager;

    private static ObstacleMap obstacleMap;

    private Vector3 old_target_pos;
    private Vector3 target_velocity;

    private float k_d = 0.7f;
    private float k_p = 0.1f;


    public FollowPath(CarController _car, Rigidbody _rigidBody, List<Vector3> _path, ObstacleMapManager _ObstacleMapManager)
    {
        this.my_rigidbody = _rigidBody;
        this.m_Car = _car;
        this.path = _path;
        obstacleMapManager = _ObstacleMapManager;
        obstacleMap = obstacleMapManager.ObstacleMap;

        this.old_target_pos = path[0];

        if (m_Car == null)
        {
            Debug.LogError("CarController component not found on the GameObject.");
        }

    }

        public FollowPath(CarController _car, Rigidbody _rigidBody, ObstacleMapManager _ObstacleMapManager)
    {
        this.my_rigidbody = _rigidBody;
        this.m_Car = _car;

        obstacleMapManager = _ObstacleMapManager;
        obstacleMap = obstacleMapManager.ObstacleMap;

 

        if (m_Car == null)
        {
            Debug.LogError("CarController component not found on the GameObject.");
        }

    }


    public Vector3Int test(){
        return obstacleMap.mapGrid.WorldToCell(Vector3.zero);
    }

    public void newPath(List<Vector3> newPath){
        this.path = newPath;
    }

 public void Follow()
    {
        if (path == null) return;

        if (path.Count > 0)
        {
            Vector3 target_position;
            Vector3 target_position1;
            k_p = 30f;
            k_d = 0.1f*k_p;

            if (path.Count > 1)
            {
                target_position = path[1];
            }
            else if (path.Count == 1)
            {
                target_position = path[0];
            }
            else
            {
                target_position = m_Car.transform.position;
            }

            Vector3 myLocalPosition = obstacleMap.mapGrid.WorldToLocal(my_rigidbody.transform.position);
            target_velocity = (target_position - old_target_pos) / Time.fixedDeltaTime;
            old_target_pos = target_position;

            Vector3 position_error = target_position - myLocalPosition;
            Vector3 velocity_error = target_velocity - my_rigidbody.velocity;
            Vector3 desired_acceleration = k_p * position_error + k_d * velocity_error;


            float steering = Vector3.Dot(desired_acceleration, my_rigidbody.transform.right);
            float acceleration = Vector3.Dot(desired_acceleration ,my_rigidbody.transform.forward);

            if (Mathf.Abs(Vector3.Distance(myLocalPosition, target_position)) < 0.5)
            {
                path.RemoveAt(0);
            }
            //Debug.Log($"Steering: {steering} Acceleration: {acceleration}");
            m_Car.Move(steering, acceleration, acceleration, 0f);
        }
    }

